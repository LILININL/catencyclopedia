// Mocks generated by Mockito 5.4.6 from annotations
// in catencyclopedia/test/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc/bloc.dart' as _i9;
import 'package:catencyclopedia/domain/usecases/cat/get_breed_search.dart' as _i4;
import 'package:catencyclopedia/domain/usecases/cat/get_cat_images.dart' as _i2;
import 'package:catencyclopedia/domain/usecases/cat/get_random_fact.dart' as _i3;
import 'package:catencyclopedia/presentation/bloc/get/cat_bloc.dart' as _i6;
import 'package:catencyclopedia/presentation/bloc/get/cat_event.dart' as _i8;
import 'package:catencyclopedia/presentation/bloc/get/cat_state.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCatImages_0 extends _i1.SmartFake implements _i2.GetCatImages {
  _FakeGetCatImages_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetRandomFact_1 extends _i1.SmartFake implements _i3.GetRandomFact {
  _FakeGetRandomFact_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetBreedSearch_2 extends _i1.SmartFake
    implements _i4.GetBreedSearch {
  _FakeGetBreedSearch_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCatState_3 extends _i1.SmartFake implements _i5.CatState {
  _FakeCatState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CatBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatBloc extends _i1.Mock implements _i6.CatBloc {
  MockCatBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCatImages get getImages =>
      (super.noSuchMethod(
            Invocation.getter(#getImages),
            returnValue: _FakeGetCatImages_0(
              this,
              Invocation.getter(#getImages),
            ),
          )
          as _i2.GetCatImages);

  @override
  _i3.GetRandomFact get getFact =>
      (super.noSuchMethod(
            Invocation.getter(#getFact),
            returnValue: _FakeGetRandomFact_1(
              this,
              Invocation.getter(#getFact),
            ),
          )
          as _i3.GetRandomFact);

  @override
  _i4.GetBreedSearch get getBreedSearch =>
      (super.noSuchMethod(
            Invocation.getter(#getBreedSearch),
            returnValue: _FakeGetBreedSearch_2(
              this,
              Invocation.getter(#getBreedSearch),
            ),
          )
          as _i4.GetBreedSearch);

  @override
  _i5.CatState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCatState_3(this, Invocation.getter(#state)),
          )
          as _i5.CatState);

  @override
  _i7.Stream<_i5.CatState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i7.Stream<_i5.CatState>.empty(),
          )
          as _i7.Stream<_i5.CatState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i8.CatEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i8.CatEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.CatState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i8.CatEvent>(
    _i9.EventHandler<E, _i5.CatState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i9.Transition<_i8.CatEvent, _i5.CatState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onChange(_i9.Change<_i5.CatState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
