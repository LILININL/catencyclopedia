// Mocks generated by Mockito 5.4.6 from annotations
// in catencyclopedia/test/data/repositories/cat_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:catencyclopedia/data/models/cat_breed_model.dart' as _i7;
import 'package:catencyclopedia/data/models/cat_image_model.dart' as _i5;
import 'package:catencyclopedia/data/sources/remote_data_source.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i3.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
          )
          as _i2.Dio);

  @override
  _i4.Future<List<_i5.CatImageModel>> getCatImages({
    int? page = 0,
    int? limit = 20,
    String? breedIds,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCatImages, [], {
              #page: page,
              #limit: limit,
              #breedIds: breedIds,
            }),
            returnValue: _i4.Future<List<_i5.CatImageModel>>.value(
              <_i5.CatImageModel>[],
            ),
          )
          as _i4.Future<List<_i5.CatImageModel>>);

  @override
  _i4.Future<String> getRandomFact() =>
      (super.noSuchMethod(
            Invocation.method(#getRandomFact, []),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getRandomFact, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<List<_i7.CatBreedModel>> searchBreeds(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchBreeds, [query]),
            returnValue: _i4.Future<List<_i7.CatBreedModel>>.value(
              <_i7.CatBreedModel>[],
            ),
          )
          as _i4.Future<List<_i7.CatBreedModel>>);
}
